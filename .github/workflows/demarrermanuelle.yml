name: Test & Replicate Release to Public

on:
  workflow_dispatch:             # pour tests manuels
    inputs:
      dummy:
        description: 'Just trigger manually'
        required: false
  release:
    types: [published, edited]   # dès qu'une release est publiée ou modifiée

jobs:
  replicate-release:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Récupérer les infos de la release (automatique ou manuelle)
      - name: Determine release data
        id: release_data
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let r;
            if (context.eventName === 'release') {
              r = context.payload.release;
            } else {
              // appel manuel → on prend la dernière release dispo
              const latest = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: 'saadiya'
              }).catch(() => null);
              if (!latest) {
                core.setFailed('Aucune release existante à répliquer.');
                return;
              }
              r = latest.data;
            }
            return {
              tag:        r.tag_name,
              name:       r.name,
              body:       r.body,
              draft:      r.draft,
              prerelease: r.prerelease,
              assets:     JSON.stringify(r.assets.map(a => ({ name: a.name, url: a.url })))
            };

      # 2️⃣ Créer ou mettre à jour la release dans le repo public
      - name: Create/update in public repo
        id: public_release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TARGET_REPO_TOKEN }}
          script: |
            const owner = "kitokoh";
            const repo  = "leopardo";
            const tag   = "${{ steps.release_data.outputs.tag }}";
            const opts = {
              owner, repo,
              tag_name:  tag,
              name:      "${{ steps.release_data.outputs.name }}",
              body:      "${{ steps.release_data.outputs.body }}",
              draft:     ${{ steps.release_data.outputs.draft }},
              prerelease:${{ steps.release_data.outputs.prerelease }}
            };
            let rel;
            try {
              // si existe, on update
              const ex = await github.rest.repos.getReleaseByTag({ owner, repo, tag });
              rel = ex.data;
              await github.rest.repos.updateRelease({ 
                owner, repo, release_id: rel.id, ...opts 
              });
            } catch {
              // sinon, on crée
              const cr = await github.rest.repos.createRelease(opts);
              rel = cr.data;
            }
            return { upload_url: rel.upload_url };

      # 3️⃣ Télécharger les assets du repo privé
      - name: Download private assets
        run: |
          mkdir -p assets
          echo '${{ steps.release_data.outputs.assets }}' \
            | jq -c '.[]' \
            | while read -r a; do
                n=$(echo "$a" | jq -r '.name')
                u=$(echo "$a" | jq -r '.url')
                echo "Downloading $n"
                curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                       -H "Accept: application/octet-stream" \
                       "$u" -o "assets/$n"
              done
        shell: bash

      # 4️⃣ Uploader ces assets dans la release publique
      - name: Upload assets to public release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.TARGET_REPO_TOKEN }}
          repository: kitokoh/leopardo
          tag_name: ${{ steps.release_data.outputs.tag }}
          files: assets/*

