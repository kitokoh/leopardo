name: Replicate Release to Public Repo

# Ajout du trigger manuel
on:
  workflow_dispatch:
  release:
    types: [published, edited]

jobs:
  replicate-release:
    runs-on: ubuntu-latest

    steps:
      # 1. Récupérer la dernière release (si invocation manuelle)
      - name: Get latest release (if manual)
        if: github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v7
        id: get_latest
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const latest = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            return {
              tag_name: latest.data.tag_name,
              name: latest.data.name,
              body: latest.data.body,
              draft: latest.data.draft,
              prerelease: latest.data.prerelease,
              assets: JSON.stringify(latest.data.assets.map(a => ({ name: a.name, url: a.url })))
            };

      # 2. Ou bien, sur événement release, récupère-la directement
      - name: Use payload release info
        if: github.event_name == 'release'
        uses: actions/github-script@v7
        id: fetch_release
        with:
          script: |
            const r = context.payload.release;
            return {
              tag_name: r.tag_name,
              name: r.name,
              body: r.body,
              draft: r.draft,
              prerelease: r.prerelease,
              assets: JSON.stringify(r.assets.map(a => ({ name: a.name, url: a.url })))
            };

      # Fusion des deux sources de données
      - name: Set release data
        id: set_data
        run: |
          echo "::set-output name=tag_name::${{ steps.get_latest.outputs.tag_name || steps.fetch_release.outputs.tag_name }}"
          echo "::set-output name=name::${{ steps.get_latest.outputs.name || steps.fetch_release.outputs.name }}"
          echo "::set-output name=body::${{ steps.get_latest.outputs.body || steps.fetch_release.outputs.body }}"
          echo "::set-output name=draft::${{ steps.get_latest.outputs.draft || steps.fetch_release.outputs.draft }}"
          echo "::set-output name=prerelease::${{ steps.get_latest.outputs.prerelease || steps.fetch_release.outputs.prerelease }}"
          echo "::set-output name=assets::${{ steps.get_latest.outputs.assets || steps.fetch_release.outputs.assets }}"

      # 3. Créer / mettre à jour la release dans le dépôt public
      - name: Create or update release in public repo
        uses: actions/github-script@v7
        id: create_release
        env:
          TARGET_TOKEN: ${{ secrets.TARGET_REPO_TOKEN }}
        with:
          github-token: ${{ secrets.TARGET_REPO_TOKEN }}
          script: |
            const owner = "kitokoh";
            const repo  = "leopardo";
            const tag   = "${{ steps.set_data.outputs.tag_name }}";
            // Vérifier si la release existe déjà
            let release;
            try {
              const existing = await github.rest.repos.getReleaseByTag({ owner, repo, tag });
              release = existing.data;
              // Update if needed
              await github.rest.repos.updateRelease({
                owner, repo,
                release_id: release.id,
                name: "${{ steps.set_data.outputs.name }}",
                body: "${{ steps.set_data.outputs.body }}",
                draft: ${{ steps.set_data.outputs.draft }},
                prerelease: ${{ steps.set_data.outputs.prerelease }}
              });
            } catch {
              // Sinon, créer la release
              const created = await github.rest.repos.createRelease({
                owner, repo,
                tag_name: tag,
                name: "${{ steps.set_data.outputs.name }}",
                body: "${{ steps.set_data.outputs.body }}",
                draft: ${{ steps.set_data.outputs.draft }},
                prerelease: ${{ steps.set_data.outputs.prerelease }}
              });
              release = created.data;
            }
            return { upload_url: release.upload_url };

      # 4. Télécharger les assets depuis le privé
      - name: Download assets from private repo
        run: |
          mkdir -p assets
          echo '${{ steps.set_data.outputs.assets }}' | jq -c '.[]' | while read -r asset; do
            name=$(echo "$asset" | jq -r '.name')
            url=$(echo "$asset" | jq -r '.url')
            echo "Downloading $name"
            curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/octet-stream" \
                 "$url" -o "assets/$name"
          done
        shell: bash

      # 5. Uploader les assets vers le dépôt public
      - name: Upload assets to public release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.TARGET_REPO_TOKEN }}
          repository: kitokoh/leopardo
          tag_name: ${{ steps.set_data.outputs.tag_name }}
          files: assets/*
